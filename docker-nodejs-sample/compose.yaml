# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.

services:
    server:
        build:
            context: .
            # Add the `target: dev` instruction to target the `dev` stage from your multi-stage Dockerfile.
            target: dev
        environment:
            NODE_ENV: production
            POSTGRES_HOST: db
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD_FILE: /run/secrets/db-password
            POSTGRES_DB: pgtododb
        ports:
            - 3000:3000
            # publish port 9229 for debugging. https://nodejs.org/en/docs/guides/debugging-getting-started
            - 9229:9229
        depends_on:
            db:
                condition: service_healthy
        secrets:
            - db-password
        # Add a new volume to the server service for the bind mount.
        # For this application, you'll mount `./src` from your local machine to `/usr/src/app/src` in the container.
        volumes:
          - ./src:/usr/src/app/src
    db:
        image: postgres
        restart: always
        user: postgres
        secrets:
            - db-password
        volumes:
            - db-data:/var/lib/postgresql/data
        environment:
            - POSTGRES_DB=pgtododb
            - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
        expose:
            - 5432
        healthcheck:
            test: ['CMD', 'pg_isready']
            interval: 10s
            timeout: 5s
            retries: 5
volumes:
    db-data:
secrets:
    db-password:
        file: db/password.txt
